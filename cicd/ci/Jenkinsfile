pipeline {
    agent {
        docker {
            image 'custom-jenkins-agent:alpine-jdk17'
            args '-v /Users/ATolcha/.docker/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        GITHUB_CREDENTIALS_ID = 'github-token'
        REPO_URL = 'https://github.com/abelWiiv/B2B-supermarket-sales-system.git'
        SONAR_AUTH_TOKEN = credentials('sonarqube')
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        IMAGE_NAME = 'abelwiiv/b2b-supermarket-sales-system-usermanagement'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        SONAR_HOST_URL = 'http://sonarqube:9000'
        MICROSERVICE_DIR = 'UserManagement'
        DOCKER_HOST = 'unix:///var/run/docker.sock'
        PATH = "/usr/local/bin:/opt/homebrew/bin:${env.PATH}"
    }

    stages {
        stage('Debug Docker') {
            steps {
                sh '''
                    echo "PATH: $PATH"
                    echo "DOCKER_HOST: $DOCKER_HOST"
                    echo "Checking Docker CLI..."
                    command -v docker || { echo "ERROR: Docker CLI not found"; exit 1; }
                    docker --version
                    echo "Checking Docker daemon..."
                    docker info --format '{{.ServerVersion}}' || { echo "ERROR: Cannot connect to Docker daemon"; exit 1; }
                    docker context ls
                    echo "Checking Docker socket..."
                    test -S $DOCKER_HOST || { echo "ERROR: Docker socket not found"; exit 1; }
                '''
            }
        }

        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: "${REPO_URL}",
                        credentialsId: "${GITHUB_CREDENTIALS_ID}"
                    ]]
                )
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir("${MICROSERVICE_DIR}") {
                    withSonarQubeEnv('SonarQube') {
                        sh '''
                            mvn sonar:sonar \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_AUTH_TOKEN}
                        '''
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir("${MICROSERVICE_DIR}") {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("${MICROSERVICE_DIR}") {
                    script {
                        def dockerImage = docker.build("${IMAGE_NAME}:${DOCKER_TAG}")
                        env.DOCKER_IMAGE = dockerImage.id
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CREDENTIALS_ID}") {
                        def dockerImage = docker.image("${IMAGE_NAME}:${DOCKER_TAG}")
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }

    post {
        always {
            sh '''
                docker rmi ${IMAGE_NAME}:${DOCKER_TAG} || true
                docker rmi ${IMAGE_NAME}:latest || true
            '''
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}

// pipeline {
//     agent any
//
//     environment {
//         GITHUB_CREDENTIALS_ID = 'github-token'
//         REPO_URL = 'https://github.com/abelWiiv/B2B-supermarket-sales-system.git'
//         SONAR_AUTH_TOKEN = credentials('sonarqube')
//         DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
//         IMAGE_NAME = 'abelwiiv/b2b-supermarket-sales-system-usermanagement' // Adjusted for UserManagement
//         DOCKER_TAG = "${env.BUILD_NUMBER}"
//         SONAR_HOST_URL = 'http://sonarqube:9000'
//         MICROSERVICE_DIR = 'UserManagement' // Directory for UserManagement
//     }
//
//     stages {
//         stage('Checkout') {
//             steps {
//                 checkout scmGit(
//                     branches: [[name: '*/main']],
//                     userRemoteConfigs: [[
//                         url: "${REPO_URL}",
//                         credentialsId: "${GITHUB_CREDENTIALS_ID}"
//                     ]]
//                 )
//             }
//         }
//
// //         stage('Unit Test') {
// //             steps {
// //                 dir("${MICROSERVICE_DIR}") {
// //                     sh 'mvn test'
// //                 }
// //             }
// //             post {
// //                 always {
// //                     junit allowEmptyResults: true, testResults: "${MICROSERVICE_DIR}/target/surefire-reports/*.xml"
// //                 }
// //             }
// //         }
//
//         stage('SonarQube Analysis') {
//             steps {
//                 dir("${MICROSERVICE_DIR}") {
//                     withSonarQubeEnv('SonarQube') {
//                         sh "mvn sonar:sonar \
//                             -Dsonar.host.url=${SONAR_HOST_URL} \
//                             -Dsonar.login=${SONAR_AUTH_TOKEN}"
//                     }
//                 }
//             }
//         }
//
//         stage('Build') {
//             steps {
//                 dir("${MICROSERVICE_DIR}") {
//                     sh 'mvn clean package -DskipTests'
//                 }
//             }
//         }
//
//         stage('Build Docker Image') {
//             steps {
//                 dir("${MICROSERVICE_DIR}") {
//                     script {
//                         def dockerImage = docker.build("abelwiiv/b2b-supermarket-sales-system-usermanagement:10")
//                     }
//                 }
//             }
//         }
//
//         stage('Push Docker Image') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
//                     sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
//                     sh "docker push ${IMAGE_NAME}:${DOCKER_TAG}"
//                     sh "docker tag ${IMAGE_NAME}:${DOCKER_TAG} ${IMAGE_NAME}:latest"
//                     sh "docker push ${IMAGE_NAME}:latest"
//                 }
//             }
//         }
//     }
//
//     post {
//         always {
//             sh "docker rmi ${IMAGE_NAME}:${DOCKER_TAG} || true"
//             sh "docker rmi ${IMAGE_NAME}:latest || true"
//         }
//         success {
//             echo 'Pipeline completed successfully!'
//         }
//         failure {
//             echo 'Pipeline failed. Check logs for details.'
//         }
//     }
// }